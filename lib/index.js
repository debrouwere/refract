// Generated by CoffeeScript 1.8.0
(function() {
  var evaluate, interpolate, kv, requote, string, updateAt, _,
    __slice = [].slice;

  evaluate = (require('coffee-script'))["eval"];

  _ = require('underscore');

  _.str = require('underscore.string');

  string = function(value) {
    return '"' + value + '"';
  };

  interpolate = function(value, options) {
    return evaluate(string(value), options);
  };

  requote = function(value) {
    if (value.match(/^'.*'$/)) {
      return string(value.slice(1, -1));
    } else {
      return value;
    }
  };

  kv = function(key, value) {
    var obj;
    obj = {};
    obj[key] = value;
    return obj;
  };

  updateAt = function() {
    var key, obj, segment, segments, value, _i, _j, _len;
    obj = arguments[0], segments = 4 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 2) : (_i = 1, []), key = arguments[_i++], value = arguments[_i++];
    for (_j = 0, _len = segments.length; _j < _len; _j++) {
      segment = segments[_j];
      obj = obj[segment] != null ? obj[segment] : obj[segment] = {};
    }
    return _.extend(obj, kv(key, value));
  };

  module.exports = function(template, context, update) {
    var err, refract, refracted, value;
    refract = _.partial(module.exports, _, context);
    if (update == null) {
      update = _.partial(updateAt, context);
    }
    switch (template.constructor) {
      case Object:
        return _.object(_.map(template, function(value, key) {
          var refracted, updateHere;
          updateHere = _.partial(update, key);
          refracted = refract(value, updateHere);
          return [key, refracted];
        }));
      case Array:
        return _.map(template, refract);
      default:
        value = requote(template);
        try {
          refracted = evaluate(value, {
            sandbox: context
          });
        } catch (_error) {
          err = _error;
          refracted = interpolate(value, {
            sandbox: context
          });
        }
        update(refracted);
        return refracted;
    }
  };

  module.exports.defaultHelpers = _.extend({}, _, _.str);

}).call(this);
