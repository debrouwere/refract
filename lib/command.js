// Generated by CoffeeScript 1.8.0
(function() {
  var additionalHelpers, context, fs, helpers, inputLocation, inputPath, normalizedObject, normalizer, object, program, rawInput, rawTemplate, refract, refractTemplate, refraction, serialization, template, utils, yaml, _;

  fs = require('fs');

  fs.path = require('path');

  _ = require('underscore');

  _.str = require('underscore.string');

  _.str.identity = _.identity;

  yaml = require('js-yaml');

  program = require('commander');

  refract = require('./');

  utils = require('./utils');

  program.option('-t --template <path>', 'Path to a template file.').option('-s --string <template>', 'A template string.').option('-a --apply <mapping>', 'A mapping that specifies which function to apply to which field.').option('-u --update', 'Add refracted fields to the original object.').option('-m --missing', 'Only refract a field if it is not present in the original object.').option('-e --each', 'Refract each element in an array.').option('-H --helpers', 'Add in additional JavaScript helper functions.').option('-i --in-place', 'Modify the file that contains the original object.').option('-n --normalized <style>', 'Normalize field names to a standard style.', 'underscored').option('-I --indent [n]', 'Output pretty indented JSON.', parseInt, 2).parse(process.argv);

  inputPath = program.args[0];

  inputLocation = inputPath || '/dev/stdin';

  rawInput = fs.readFileSync(fs.path.resolve(inputLocation), {
    encoding: 'utf8'
  });

  object = yaml.safeLoad(rawInput);

  if (program.template) {
    rawTemplate = fs.readFileSync(fs.path.resolve(program.template), {
      encoding: 'utf8'
    });
    template = yaml.safeLoad(rawTemplate);
  } else if (program.string) {
    template = yaml.safeLoad(program.string);
  } else if (program.apply) {
    template = _.object(program.apply).split(',').map(function(instruction) {
      return instruction.split(':');
    });
  } else {
    throw new Error("Specify a --template, --string string or --apply mapping.");
  }

  if (program.helpers) {
    require('coffee-script/register');
    additionalHelpers = require(fs.path.resolve(program.helpers));
  }

  helpers = _.extend({}, additionalHelpers, refract.defaultHelpers);

  normalizer = _.str[program.normalized || 'identity'];

  normalizedObject = utils.applyToKeys(object, normalizer);

  refractTemplate = _.partial(refract, template);

  if (program.each) {
    refraction = _.map(normalizedObject, function(item) {
      var context;
      context = _.extend({}, item, helpers);
      return refractTemplate(context);
    });
  } else {
    context = _.extend({}, normalizedObject, helpers);
    refraction = refractTemplate(context);
  }

  if (program.missing) {
    refraction = _.defaults(normalizedObject, refraction);
  } else if (program.update) {
    refraction = _.extend(normalizedObject, refraction);
  }

  serialization = JSON.stringify(refraction, void 0, program.indent);

  if (program.inPlace) {
    if (!inputPath) {
      throw new Error("Cannot edit in-place on stdin.");
    }
    fs.writeFileSync(inputPath, serialization, {
      encoding: 'utf8'
    });
  } else {
    console.log(serialization);
  }

}).call(this);
